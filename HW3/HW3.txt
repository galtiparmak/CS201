#ifndef FLOWER__H
#define FLOWER__H

#include <iostream>
#include <string>
using namespace std;


class Flower{
public:
    Flower();
    Flower(string flowerName);
    Flower(const Flower& aFlower);
    ~Flower();
    bool isEmpty() const;
    int getLength() const ;
    bool add(string feature);
    bool remove(string feature);
    string printFlower() const;
    string getFlowerName();
    bool isFeatureExist(string feature) const;
private:
    struct FeatureNode {
        string feature;
        FeatureNode* next;
    };
    int size;
    string flowerName;
    FeatureNode *head; //the features are stored in a sorted singly linear linked list
};

#endif // FLOWER__H

-------------------------------------------------------------------
#include "Flower.h"

#include <iostream>
#include <string>
using namespace std;

Flower::Flower() {
    size = 0;
    head = NULL;
    flowerName = "";
}

Flower::Flower(string flowerName) {
    this->flowerName = flowerName;
    size = 0;
    head = NULL;
}

Flower::Flower(const Flower& aFlower) : size(aFlower.size) {
    if (aFlower.head == NULL) {
        head = NULL;
    }
    else {
        head = new FeatureNode;
        head->feature = aFlower.head->feature;
        FeatureNode *newptr = head;

        for (FeatureNode *temp = aFlower.head->next; temp != NULL; temp = temp->next) {
            newptr->next = new FeatureNode;
            newptr = newptr->next;
            newptr->feature = temp->feature;
        }
        newptr->next = NULL;
    }
}

Flower::~Flower() {
    FeatureNode *currNode = head;
    FeatureNode *nextNode = NULL;

    while (currNode != NULL) {
        nextNode = currNode->next;
        delete currNode;
        currNode = nextNode;
    }
    size = 0;
}

bool Flower::isEmpty() const {
    return size == 0;
}

int Flower::getLength() const {
    return size;
}

bool Flower::add(string feature) {
    FeatureNode *newNode = new FeatureNode;
    newNode->feature = feature;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
        size++;
        return true;
    }
    else {
        FeatureNode *currNode = head;
        while (currNode != NULL) {
            if (currNode->feature == feature) {
                return false;
            }
            currNode = currNode->next;
        }

        FeatureNode *prevNode = NULL;
        currNode = head;
        while (currNode != NULL) {
            if (newNode->feature.compare(currNode->feature) < 0) {
                if (currNode == head) {
                    newNode->next = head;
                    head = newNode;
                }
                else {
                    newNode->next = prevNode->next;
                    prevNode->next = newNode;
                }
                size++;
                return true;
            }
            prevNode = currNode;
            currNode = currNode->next;
            if (currNode == NULL) {
                newNode->next = prevNode->next;
                prevNode->next = newNode;
                size++;
                return true;
            }
        }
        return false;
    }
}

bool Flower::remove(string feature) {
    if (head == NULL) {
        return false;
    }
    else {
        FeatureNode *currNode = head;
        FeatureNode *prevNode = NULL;
        while (currNode != NULL) {
            if (currNode->feature == feature) {
                if (currNode == head) {
                    head = currNode->next;
                }
                else {
                    prevNode->next = currNode->next;
                }
                delete currNode;
                size--;
                return true;
            }
            prevNode = currNode;
            currNode = currNode->next;
        }
        return false;
    }
}

string Flower::printFlower() const {
    string str = "";
    str += flowerName + ": ";

    if (head == NULL) {
        str += "No feature";
        return str;
    }
    else {
        FeatureNode *currNode = head;
        while (currNode != NULL) {
            str += currNode->feature;
            currNode = currNode->next;
            if (currNode != NULL) {
                str += ", ";
            }
        }
        return str;
    }
}

string Flower::getFlowerName() {
    return flowerName;
}

bool Flower::isFeatureExist(string feature) const {
    if (size == 0) {
        return false;
    }
    else {
        FeatureNode *currNode = head;
        while (currNode != NULL) {
            if (currNode->feature == feature) {
                return true;
            }
            currNode = currNode->next;
        }
        return false;
    }
}

-------------------------------------------------------------------
#ifndef FLOWERLIST__H
#define FLOWERLIST__H

#include "Flower.h"
using namespace std;

class FlowerList{
public:
    FlowerList();
    FlowerList(const FlowerList& aList);
    ~FlowerList();
    bool isEmpty() const;
    int getLength() const;
    bool retrieve(string flowerName, Flower& flower) const;
    bool add(string flowerName);
    bool remove(string flowerName);
    void printFlowerList() const;
    Flower* retrieve(string flowerName) const;
    string findFlowersAccordingToFeature(string feature) const;
private:
    struct FlowerNode{
        Flower f;
        FlowerNode* next;
    };
    int size;
    FlowerNode* head; //the flowers are stored in a sorted singly linear linked list
    // ...
    //you may define additional member functions and data members, if necessary
};

#endif // FLOWERLIST__H

-------------------------------------------------------------------
#include "Flower.h"
#include "FlowerList.h"

#include <iostream>
#include <string>
using namespace std;

FlowerList::FlowerList() {
    size = 0;
    head = NULL;
}

FlowerList::FlowerList(const FlowerList& aList) : size(aList.size){
    if(aList.head == NULL) {
        head = NULL;
    }
    else {
        head = new FlowerNode;
        head->f = aList.head->f;
        FlowerNode *newptr = head;

        for (FlowerNode *temp = aList.head->next; temp != NULL; temp = temp->next) {
            newptr = new FlowerNode;
            newptr = newptr->next;
            newptr->f = temp->f;
        }
        newptr = NULL;
    }
}

FlowerList::~FlowerList() {
    FlowerNode *currNode = head;
    FlowerNode *nextNode = NULL;

    while (currNode != NULL) {
        nextNode = currNode->next;
        delete currNode;
        currNode = nextNode;
    }
    head = NULL;
    size = 0;
}

bool FlowerList::isEmpty() const {
    return size == 0;
}

int FlowerList::getLength() const {
    return size;
}

bool FlowerList::retrieve(string flowerName, Flower& flower) const {
    if (head == NULL) {
        return false;
    }
    else {
        FlowerNode *currNode = head;
        while (currNode != NULL) {
            if (currNode->f.getFlowerName() == flowerName) {
                flower = currNode->f;
                return true;
            }
            currNode = currNode->next;
        }
        return false;
    }
}

bool FlowerList::add(string flowerName) {
    FlowerNode *newNode = new FlowerNode;
    newNode->f = Flower(flowerName);
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
        size++;
        return true;
    }
    else {
        FlowerNode *currNode = head;
        while (currNode != NULL) {
            if (currNode->f.getFlowerName() == flowerName) {
                return false;
            }
            currNode = currNode->next;
        }

        FlowerNode *prevNode = NULL;
        currNode = head;
        while (currNode != NULL) {
            if (newNode->f.getFlowerName().compare(currNode->f.getFlowerName()) < 0) {
                if (currNode == head) {
                    newNode->next = head;
                    head = newNode;
                }
                else {
                    newNode->next = prevNode->next;
                    prevNode->next = newNode;
                }
                size++;
                return true;
            }
            prevNode = currNode;
            currNode = currNode->next;
            if (currNode == NULL) {
                newNode->next = prevNode->next;
                prevNode->next = newNode;
                size++;
                return true;
            }
        }
        return false;
    }
}

bool FlowerList::remove(string flowerName) {
    if (head == NULL) {
        return false;
    }
    else {
        FlowerNode *currNode = head;
        FlowerNode *prevNode = NULL;
        while (currNode != NULL) {
            if (currNode->f.getFlowerName() == flowerName) {
                if (currNode == head) {
                    head = currNode->next;
                }
                else {
                    prevNode->next = currNode->next;
                }
                delete currNode;
                size--;
                return true;
            }
            prevNode = currNode;
            currNode = currNode->next;
        }
        return false;
    }
}

void FlowerList::printFlowerList() const {
    FlowerNode *currNode = head;
    while (currNode != NULL) {
        cout << currNode->f.printFlower() << endl;
        currNode = currNode->next;
    }
}

Flower* FlowerList::retrieve(string flowerName) const {
    if (head == NULL) {
        return NULL;
    }
    else {
        FlowerNode *currNode = head;
        while (currNode != NULL) {
            if (currNode->f.getFlowerName() == flowerName) {
                return &(currNode->f);
            }
            currNode = currNode->next;
        }
        return NULL;
    }
}

string FlowerList::findFlowersAccordingToFeature(string feature) const {
    string str = feature + " flowers: ";
    if (size == 0) {
        str += "there is no such flower";
        return str;
    }
    else {
        int count = 0;
        FlowerNode *currNode = head;
        FlowerNode *tempNode = currNode;
        while (currNode != NULL) {
            if (currNode->f.isFeatureExist(feature)) {
                str += currNode->f.getFlowerName();
                count++;
                tempNode = currNode->next;
                if (tempNode != NULL) {
                    str += ", ";
                }
            }
            currNode = currNode->next;
            tempNode = currNode;
        }
        if (count != 0) {
            return str;
        }
        str += "there is no such flower";
        return str;
    }
}

-------------------------------------------------------------------
#ifndef FLOWERLIBRARY__H
#define FLOWERLIBRARY__H

#include "FlowerList.h"
class FlowerLibrary{
public:
    FlowerLibrary();
    ~FlowerLibrary();
    void addFlower(string name);
    void removeFlower(string name);
    void listFlowers() const;
    void listFeatures(string name) const;
    void addFeature(string name,string feature);
    void removeFeature(string name, string feature);
    void findFlowers(string feature) const;
    string toLowerChar(string str);
private:
    FlowerList flowers;
    // ...
    //you may define additional member functions and data members, if necessary
};

#endif // FLOWERLIBRARY__H

-------------------------------------------------------------------
#include "Flower.h"
#include "FlowerList.h"
#include "FlowerLibrary.h"

#include <iostream>
#include <string>
#include <cctype>
using namespace std;

FlowerLibrary::FlowerLibrary() {
}

FlowerLibrary::~FlowerLibrary() {
    //flowers = NULL;
}

void FlowerLibrary::addFlower(string name) {
    string lowerName = toLowerChar(name);
    if (!flowers.add(lowerName)) {
        cout << lowerName << " cannot be added into the library because it already exists." << endl;
    }
    else {
        cout << lowerName << " has been added into the library." << endl;
    }
}

void FlowerLibrary::removeFlower(string name) {
    string lowerName = toLowerChar(name);
    if (!flowers.remove(lowerName)) {
        cout << lowerName << " cannot be removed because it's not in the library." << endl;
    }
    else {
        cout << lowerName << " has been removed from the library." << endl;
    }

}

void FlowerLibrary::listFlowers() const {
    if (flowers.isEmpty()) {
        cout << "Library is empty" << endl;
    }
    else {
        flowers.printFlowerList();
    }
}

void FlowerLibrary::listFeatures(string name) const {
    Flower *f;
    f = flowers.retrieve(name);
    if (f == NULL) {
        cout << name << " doesn't exist in the system" << endl;
    }
    else {
        cout << f->printFlower() << endl;
    }
}

void FlowerLibrary::addFeature(string name, string feature) {
    Flower *f;
    string lowerName = toLowerChar(name);
    f = flowers.retrieve(lowerName);
    string lowerFeature = toLowerChar(feature);
    if (f != NULL) {
        if (!f->add(lowerFeature)) {
            cout << lowerFeature << " already exists in " << lowerName << endl;
        }
        else {
            cout << lowerFeature << " is added into " << lowerName << endl;
        }
    }
    else {
        cout << lowerName << " isn't found in library" << endl;
    }
}

void FlowerLibrary::removeFeature(string name, string feature) {
    Flower *f;
    string lowerName = toLowerChar(name);
    f = flowers.retrieve(lowerName);
    string lowerFeature = toLowerChar(feature);
    if (f != NULL) {
        if (!f->remove(lowerFeature)) {
            cout << lowerFeature << " doesn't exist in " << lowerName << endl;;
        }
        else {
            cout << lowerFeature << " is removed from " << lowerName << endl;
        }
    }
    else {
        cout << lowerName << " doesn't exist in the system" << endl;
    }
}

void FlowerLibrary::findFlowers(string feature) const {
    cout << flowers.findFlowersAccordingToFeature(feature) << endl;
}

string FlowerLibrary::toLowerChar(string str) {
    string result = "";
    for (int i = 0; i < str.length(); i++) {
        char ch = tolower(str[i]);
        result += ch;
    }
    return result;
}

-------------------------------------------------------------------
